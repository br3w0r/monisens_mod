/* automatically generated by rust-bindgen 0.63.0 */

#![allow(warnings)]

#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ConnParamType {
    ConnParamBool = 0,
    ConnParamInt = 1,
    ConnParamFloat = 2,
    ConnParamString = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConnParamInfo {
    pub name: *mut ::std::os::raw::c_char,
    pub typ: ConnParamType,
}
#[test]
fn bindgen_test_layout_ConnParamInfo() {
    const UNINIT: ::std::mem::MaybeUninit<ConnParamInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ConnParamInfo>(),
        16usize,
        concat!("Size of: ", stringify!(ConnParamInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ConnParamInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ConnParamInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConnParamInfo),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).typ) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ConnParamInfo),
            "::",
            stringify!(typ)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceConnectInfo {
    pub connection_params: *mut ConnParamInfo,
    pub connection_params_len: i32,
}
#[test]
fn bindgen_test_layout_DeviceConnectInfo() {
    const UNINIT: ::std::mem::MaybeUninit<DeviceConnectInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DeviceConnectInfo>(),
        16usize,
        concat!("Size of: ", stringify!(DeviceConnectInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<DeviceConnectInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(DeviceConnectInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceConnectInfo),
            "::",
            stringify!(connection_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_params_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceConnectInfo),
            "::",
            stringify!(connection_params_len)
        )
    );
}
pub type device_info_callback = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void, arg2: *mut DeviceConnectInfo),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConnParam {
    pub name: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ConnParam() {
    const UNINIT: ::std::mem::MaybeUninit<ConnParam> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ConnParam>(),
        16usize,
        concat!("Size of: ", stringify!(ConnParam))
    );
    assert_eq!(
        ::std::mem::align_of::<ConnParam>(),
        8usize,
        concat!("Alignment of ", stringify!(ConnParam))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ConnParam),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ConnParam),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeviceConnectConf {
    pub connection_params: *mut ConnParam,
    pub connection_params_len: i32,
}
#[test]
fn bindgen_test_layout_DeviceConnectConf() {
    const UNINIT: ::std::mem::MaybeUninit<DeviceConnectConf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<DeviceConnectConf>(),
        16usize,
        concat!("Size of: ", stringify!(DeviceConnectConf))
    );
    assert_eq!(
        ::std::mem::align_of::<DeviceConnectConf>(),
        8usize,
        concat!("Alignment of ", stringify!(DeviceConnectConf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_params) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceConnectConf),
            "::",
            stringify!(connection_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connection_params_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(DeviceConnectConf),
            "::",
            stringify!(connection_params_len)
        )
    );
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum SensorDataType {
    SensorDataInt = 0,
    SensorDataFloat = 1,
}
pub type mod_version_fn = ::std::option::Option<unsafe extern "C" fn() -> u8>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Functions {
    pub init:
        ::std::option::Option<unsafe extern "C" fn(handler: *mut *mut ::std::os::raw::c_void)>,
    pub obtain_device_info: ::std::option::Option<
        unsafe extern "C" fn(
            handler: *mut ::std::os::raw::c_void,
            obj: *mut ::std::os::raw::c_void,
            callback: device_info_callback,
        ),
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(handler: *mut ::std::os::raw::c_void)>,
    pub connect_device: ::std::option::Option<
        unsafe extern "C" fn(
            handler: *mut ::std::os::raw::c_void,
            connect_info: *mut DeviceConnectConf,
        ) -> u8,
    >,
}
#[test]
fn bindgen_test_layout_Functions() {
    const UNINIT: ::std::mem::MaybeUninit<Functions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Functions>(),
        32usize,
        concat!("Size of: ", stringify!(Functions))
    );
    assert_eq!(
        ::std::mem::align_of::<Functions>(),
        8usize,
        concat!("Alignment of ", stringify!(Functions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Functions),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).obtain_device_info) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Functions),
            "::",
            stringify!(obtain_device_info)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Functions),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).connect_device) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Functions),
            "::",
            stringify!(connect_device)
        )
    );
}
pub type functions_fn = ::std::option::Option<unsafe extern "C" fn() -> Functions>;
